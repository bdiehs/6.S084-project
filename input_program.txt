import leon.annotation._
import leon.lang._
import leon.lang.synthesis._

object Complete {
  sealed abstract class List
  case class Cons(head: BigInt, tail: List) extends List
  case object Nil extends List

  def split (lst : List) : (List, List) = {
    choose {(res : (List, List)) =>
    lst match { 
      case Nil => (res) == ((Nil, Nil))
      case Cons(BigInt(0), Nil) => (res) == ((Cons(BigInt(0), Nil), Nil))
      case Cons(BigInt(0), Cons(BigInt(1), Nil)) => (res) == ((Cons(BigInt(0), Nil), Cons(BigInt(1), Nil)))
      case _ => true
    }
    }
  } 
}
