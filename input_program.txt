import leon.annotation._
import leon.lang._
import leon.lang.synthesis._

object Complete {
  sealed abstract class List
  case class Cons(head: BigInt, tail: List) extends List
  case object Nil extends List

  def size (lst : List) : Int = {
    lst match {
      case Nil => 0
      case Cons(_, rest) => 
        (1) + (size(rest))
    }
  }
  def content (lst : List) : Set[BigInt] = {
    lst match {
      case Nil => Set()
      case Cons(e, rest) => 
        (Set(e)) ++ (content(rest))
    }
  }
  def hole(lst : List) : (List, List)= {
  choose {(r : (List, List)) => (content(lst)) == ((content(r._1)) ++ (content(r._2))) && (size(lst) == (size(r._1) + size(r._2)))
							 .&& ((size(r._1) - size(r._2)) == 1 || (size(r._2) - size(r._1) == 1) 
							 .|| (size(r._1) - size(r._2) == 0))}
  }
  
}
